package Game;

import processing.core.PApplet;
import processing.core.PImage;
import processing.core.PFont;
import controlP5.*;	
import ddf.minim.*;
import ddf.minim.Controller;

public class haupt extends PApplet{
// Initialisierung //////////////
	//ControlP5 cp5 = new ControlP5(this);
	public int animationchanger=0;
	public int rightmov = 12;
	public int downmov= 0;
	public int upmov=18;
	public int leftmov=6;
	public int bewegungseitlich = 250;
	public int bewegunghorizontal = 250;
	public int startTime;
	int entercutscene=0;
	int fadeIn=0;
	int schrittZaehler = 0;
	float gainVoulumeMusik = (float) -15.0;
	float gainVoulumeSound = (float) -10.0;
	///////////
	public String textAusgabe ="Hallo Welt";
	///////////
	public PFont font;
	public PImage[] pimg = new PImage[50];
	public PImage[] backgroundimg = new PImage[30];
	public PImage[] backgroundcollision = new PImage[30];
	PImage test;
	///////////
	public AudioPlayer luca1[];
	public AudioPlayer song;
	public AudioPlayer levelChangeSound;
	public AudioPlayer bossMusik;
	public gameButtons gbuttons = new gameButtons();
	public hitCollisionUmgebung coll = new hitCollisionUmgebung();
	public ImageLoader imgloader = new ImageLoader();
	public BackagroundLoader backloader;
	public hitCollisionUmgebung collisionUmgebung;
	Minim minim;
	CharMovment charmov = new CharMovment();
	TextBoxTalk tbox = new TextBoxTalk();
	///////////
	boolean movmenthaltlinks = true;
	boolean movmenthaltrunter = true;
	boolean movmenthalthoch = true;
	boolean movmenthaltrechts = true;
	boolean erstecutscene = true;
	boolean enterswitch = false;
	boolean laufstop = false;
	boolean animationstop = false;
	boolean switch1 = false;
	boolean animationMovment = false;
	Controller tester;
///////////////////////////
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PApplet.main("Game.haupt"); // Proccesing main wird aufgerufen
	}


	public void setup(){
		frameRate(15);		 // Framerate wird auf 20 gehalten
		gbuttons.buttonsetup(this);
	}
	
	
	
	public void settings(){
		
		size(800,800); // Unser spiel wird in einem Fenster mit 800x800 geÃ¶ffnet
		System.out.println(sketchPath()); // Der SketchPath wird ausgegeben, ist unser arbeitspfad fÃ¼r Dateien.
		imgloader.LoadImageCharMov(pimg); // Der Hauptcharackter wird geladen.
		backloader = new BackagroundLoader(backgroundimg); // Alle HintergrÃ¼nde werden geladen
		collisionUmgebung = new hitCollisionUmgebung();
		collisionUmgebung.backagroundcollision(backgroundcollision);
		//System.out.println(pimg[5]); 
		startTime = millis(); // Millis wird gestartet
		minim = new Minim(this); // Neues minim Objekt erstellen
		levelChangeSound = minim.loadFile("/Sound/Change.wav"); // Laden der Sound Datei !
		song = minim.loadFile("/Sound/Chellos.wav"); // die Sound Datei wird von minim Geladen und an dem song objekt weiter gegeben
		bossMusik = minim.loadFile("/Sound/guitar.mp3");
		song.play(); // Der sound wird abgespielt
		song.loop(); // Der sound wird Unendlich lange Wiederholt
		song.setGain(gainVoulumeMusik); // Der Sound wird um -15 DB gesunken
		levelChangeSound.setGain(gainVoulumeSound); // Der Sound wird um -10 DB Gesunken
		bossMusik.setGain(gainVoulumeSound); // Bossmusik wird um -10 DB Gesunken
		bossMusik.play();
		bossMusik.loop();
		bossMusik.mute(); 
		//song.mute(); // Musik Muten
		//song.unmute(); // Song wieder Unmuten
	}
	
	
	public void draw(){
		
		if(switch1==true){ // FadeIn Effekt Berechnung für den Levelwechsel
			fadeIn = fadeIn +10; // Wert wird mit +10 Addiert!
			tint(255,fadeIn);
			if(fadeIn>255){ // Wenn der FadeIn über 255 ist wird der Switch betätigt und die Variable wieder auf 0 gesetzt
				switch1=false;
				tint(255,fadeIn);
				fadeIn=0;
			}
		}	
		//System.out.println(frameRate);
		 background(0,0,0); // Weiterer Hintergrund der für den FadeIn Effekt genutzt wird
		 image(backgroundcollision[backloader.backgroundid],0,0);
		 image(backgroundimg[backloader.backgroundid],0,0); // Hintergrund der geladen wird
	
		
		 tbox.Textbox(textAusgabe,this,font);
		 image(pimg[animationchanger] ,bewegungseitlich, bewegunghorizontal);// Dieses PImage ist der Hauptcharakter
		if(bewegungseitlich >= 570){ // Wenn char auf der x Achse 570 erreicht:
			tint(255,0);	// Die Transperenz wird auf 0 gesetzt
			switch1 = true;	// Der Switch für den FadeIn Effekt wird umgelegt
			levelChangeSound.play(); // Beim Wechseln des Levels wird ein Sound Abgespielt
			bewegungseitlich = backloader.backgroundchangerright(bewegungseitlich);// Wird der Hintergrund gewechselt nach rechts
			levelChangeSound.rewind(); // Wichtig damit der Sound wieder am Anfang ist sonst BUG !
		}
		if(bewegungseitlich <= 20 ){ // Wenn der Char auf der X Achse auf 20 ist:
			tint(255,0);	
			switch1 = true;
			levelChangeSound.play();
			bewegungseitlich = backloader.backgroundchangerleft(bewegungseitlich); // wird der hintergrund nach links geÃ¤ndert
			gbuttons.buttonForAll.show();
			levelChangeSound.rewind(); // Wichtig damit der Sound wieder am Anfang ist sonst BUG !
		}
		
		if(keyPressed == false){ // Hier befindet sich die Idle Animation			
			if(millis() > startTime + 200){
			startTime = millis();
				if (animationchanger == 0){ // einfacher Switch für die Idle Animation
    				animationchanger = 1;
    			}else{
    				animationchanger = 0;
    			}
			}
		}
		//System.out.println(backloader.backgroundid);
		
		// ***** Musik Steuerung **** 
		
		if(backloader.backgroundid == 1 || backloader.backgroundid == 4){
			song.mute();
			bossMusik.unmute();
		}else{
			song.unmute();
			bossMusik.mute();
		}
		
		
		
		// ****** Musik Steuerung Ende ******
		//************************ Hier kommt der Content vom Spiel / Events ****************************
		
		
		
		//
		//cutscene(); // Die Anfangs Cutscene wird geladen von der Funktion Cutscene()
		
		
	}
	
public void controlEvent(ControlEvent theEvent){
	System.out.println(theEvent.getController().getName()); // Event Controller für die Button Abfrage
}

public void Antwort(int theValue){ // Button Name Antwort wird hier Aufgerufen und kann manipuliert werden
	System.out.println("test");
	textAusgabe ="Button Pressed";
	gbuttons.buttonForAll.hide();
}
public void test(int theVaule){ // Button mit dem namen test wird Aufgerufen und kann hier manipuliert werden
	textAusgabe = "Button Test pressed";
}
	
	public void keyPressed(){ // Alle funktionen fÃ¼r Key presses
		//test platzhalter = new test(this);
		if((key == 'd' || key == 'D')){ // Bei tastentdruck d Passiert:
			//System.out.println("w");
			 pixelcollisionright(bewegungseitlich,bewegunghorizontal);
				if(laufstop == false){
			rightmov = charmov.animationright(rightmov);
			animationchanger = rightmov;// Ruft funktion aus imageLoader aus fÃ¼r animation
				bewegungseitlich = charmov.charbewegungrechts(bewegungseitlich); // der char bewegt sich in folgende richtung	
				}
			}
				
		if((key == 'a' || key == 'A')){ // Bei Tastendruck a Passiert :
			
			if (bewegungseitlich < 0){ // Wenn der Charackter bei der x Achse kleiner als 0 ist:
				movmenthaltlinks = false;	// Darf char sich nicht in die richtung bewegen:
			}else{
				movmenthaltlinks = true; // Darf char sich in die richtung bewegen
			}

			if(backloader.backgroundid == 0){// Wenn der Backgroundid 0 ist also erstes bild:
				
				if(movmenthaltlinks == true){
					pixelcollisionleft(bewegungseitlich,bewegunghorizontal);// und der bool wert true ist
					if(laufstop == false){
					leftmov = charmov.animationleft(leftmov);
					animationchanger = leftmov;
					bewegungseitlich = charmov.charbewegunglinks(bewegungseitlich); // Charackter bewegung in die richtung
					}
				}else{
					
				}
				
			}else{
				pixelcollisionleft(bewegungseitlich,bewegunghorizontal);// Bei anderen backgrounds darf char sich bewegen
				if(laufstop == false){
				leftmov = charmov.animationleft(leftmov);
				animationchanger = leftmov;
				bewegungseitlich = charmov.charbewegunglinks(bewegungseitlich);	
				}
			}
				
		}
		if((key == ENTER || key == RETURN)){ // Bei Tastendruck Enter / Return :
			//textAusgabe = "Enter Wurde gedrückt";
			
			if(erstecutscene == true){
				if(animationMovment == false){
					entercutscene = entercutscene +1;	
				}
			}
		}
		if((key == 'w' || key == 'W')){ // Bei tastendruck w Passiert:
			//textAusgabe = "das ist die taste w";
			pixelcollisionup(bewegungseitlich,bewegunghorizontal);
			if(laufstop == false){
			upmov = charmov.animationup(upmov);
			animationchanger = upmov;
			bewegunghorizontal = charmov.charbewegunghoch(bewegunghorizontal);// Char bewegt sich in die richtung
			}
		}
		if((key == 's' || key == 'S')){ // Bei tastendtuck s Passiert:
			//textAusgabe = "das ist die taste s";
			if(bewegunghorizontal >= 530){
				
				movmenthaltrunter = false;
			}else{
				movmenthaltrunter = true;
			}
			if(movmenthaltrunter == true){
				pixelcollisiondown(bewegungseitlich,bewegunghorizontal);
				if(laufstop == false){
				downmov = charmov.animationdown(downmov);
				animationchanger = downmov;
				bewegunghorizontal = charmov.charbewegungrunter(bewegunghorizontal); // Char bewegt sich in die richtung
				}
			}
		}
	}

	
	/*public void cutscene(){ // Erste Cutscene
		if(erstecutscene == true){
			laufstop = true;
			if(entercutscene == 0){
			textAusgabe = "Held: Oh man ... es ist schon recht Spät.";
			}
			if(entercutscene == 1){
				textAusgabe = "Held: Ich sollte Vielleicht mal ins Bett.";
					if(schrittZaehler != 10){
				animationMovment = true;
				//System.out.println(schrittZaehler);
				downmov = charmov.animationdown(downmov);
				animationchanger = downmov;
				bewegunghorizontal = charmov.charbewegungrunter(bewegunghorizontal);
				schrittZaehler++;
					}
					if(schrittZaehler == 10){
						animationMovment = false;
					}
				
			}
				if(entercutscene >= 2){
					schrittZaehler=0;
					textAusgabe = "Held: Dann mal los.";
					erstecutscene = false;
					laufstop = false;
					entercutscene = 0;
					}
		}
		//System.out.println(entercutscene);
	}*/
	
	
	
	public void pixelcollisionright(int x, int y){
		luca[0].play();
		loadPixels();
		backgroundcollision[backloader.backgroundid].loadPixels();
		int pixelcordiante=0;
		pixelcordiante = 26+x+(y+46)*800;
		
		println(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]));
		//System.out.println(pixelcordiante);
		
		
		for(int i=1;i <= 4; i++){
		if(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]) == 0.0){
			println("Schwarz");
			laufstop=true;
			i++;
			pixelcordiante++;
		}
		if(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]) >= 200.0){
			println("Weiß");
			laufstop=false;
			i++;
			pixelcordiante++;
		}
		}
		
	}
	
	public void pixelcollisionleft(int x, int y){
		loadPixels();
		backgroundcollision[backloader.backgroundid].loadPixels();
		int pixelcordiante=0;
		pixelcordiante = x+(y+46)*800;
		
		println(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]));
		//System.out.println(pixelcordiante);
		
		
		for(int i=1;i <= 4; i++){
		if(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]) == 0.0){
			println("Schwarz");
			laufstop=true;
			i++;
			pixelcordiante--;
		}
		if(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]) >= 200.0){
			println("Weiß");
			laufstop=false;
			i++;
			pixelcordiante--;
		}
		}
		
	}
	
	public void pixelcollisionup(int x, int y){
		loadPixels();
		backgroundcollision[backloader.backgroundid].loadPixels();
		int pixelcordiante=0;
		pixelcordiante = x+(y+43)*800;
		
		println(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]));
		//System.out.println(pixelcordiante);
		
		
		for(int i=1;i <= 2; i++){
		if(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]) == 0.0){
			println("Schwarz");
			laufstop=true;
			i++;
			pixelcordiante = pixelcordiante -800;
		}
		if(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]) >= 200.0){
			println("Weiß");
			laufstop=false;
			i++;
			pixelcordiante = pixelcordiante -800;
		}
		}
		
	}
	
	public void pixelcollisiondown(int x, int y){
		loadPixels();
		backgroundcollision[backloader.backgroundid].loadPixels();
		int pixelcordiante=0;
		pixelcordiante = x+(y+64)*800;
		
		println(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]));
		//System.out.println(pixelcordiante);
		
		
		for(int i=1;i <= 2; i++){
		if(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]) == 0.0){
			println("Schwarz");
			laufstop=true;
			i++;
			pixelcordiante = pixelcordiante +800;
		}
		if(red(backgroundcollision[backloader.backgroundid].pixels[pixelcordiante]) >= 200.0){
			println("Weiß");
			laufstop=false;
			i++;
			pixelcordiante = pixelcordiante +800;
		}
		}
		
	}
	
	
	
	
	
	
	
}